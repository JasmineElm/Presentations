#!/usr/bin/env bash

set -u -e -o errtrace -o pipefail
trap "echo ""Aborting due to errexit on line $LINENO. Exit code: $?"" >&2" ERR
IFS=$'\n\t'

######  VARIABLES    ###########################################

_ME="$(basename "${0}")"
_OUTDIR='output/'

# formatting
bold=$(tput bold)
normal=$(tput sgr0)

######  FUNCTIONS    ###########################################

_countMarkdown() {
  find . -iwholename "./*.md" -type f | wc -l
}

_outFNFromMD() {
  input=$(find . -type f -iwholename "./*.md")
  output=$(basename -- "$input")
  echo "${output%.*}"
}

_yamlLineMatches() {
  grep -c "pdf-title" config/meta.yaml
}

_outFNFromYaml() {
  grep "pdf-title" config/meta.yaml \
  | sed 's/pdf-title://;s/^[ \t]*//;s/[ \t]*$//;s/[][]//g;s/[^A-Za-z0-9.-]/_/g'
}

_outputFileName() {
  outFile='report'
  if [[ $(_countMarkdown) -eq 1 ]]; then
    outFile=$(_outFNFromMD)
  fi
  if [[ $(_yamlLineMatches) -eq 1 ]]; then
    outFile=$(_outFNFromYaml)
  fi
  printf "%s$outFile"
}

_cleanInputFile() {
  # files should be utf8 anyway, but explicitly change it here...
  iconv -c --verbose -t utf8 "$1" >"$2"
  rm "$1"
}

_concatenateFiles() {
  # all files should have a pagebreak
  printf "file order:\\n"
  for file in ./*.md; do
    (
      cat "${file}"
      printf "\\npagebreak\\n"
    ) >>"$1"
    printf "%s\\t$file\\n"
  done
  sed -i '$ d' "$1" #remove the last pagebreak that we added
}

_makeInputFile() {
  rm -rf .tmp && mkdir .tmp
  tmpfile=".tmp/$(date +%s)"
  #concatenate all the files found wi
  _concatenateFiles "$tmpfile"
  _cleanInputFile "$tmpfile" "$tmpfile.md"
}

### BUILD ARGUMENTS ###
#
# some tex templates override the language param
# declare here not in the config/meta.yaml to be safe

_determineTemplate() {
  case "$1" in
    html)
      template="slidy"
      ;;
    *)
      template="beamer"
      ;;
  esac
  printf "%s$template"
}

_buildPresentation() {
  local format="$1"
  logfile="$output.$format.log"
  if [ "$noLogFiles" = false ]; then
    printf "%sbuilding $format...\\n  See $logfile for details\\n"
  fi
  # fix template based on output
  template=$(_determineTemplate "$format")
  pandoc .tmp/*.md \
    --template="$template" \
    --metadata-file=config/meta.yaml \
    -V lang=en-GB \
    --biblio=config/references.bib \
    --template template/def.tex \
    --pdf-engine=xelatex \
    --highlight-style=zenburn \
    --strip-comments \
    --self-contained \
    --verbose \
    --css=template/css \
    --csl=template/def.csl \
    --output "$_OUTDIR$output.$format" \
    2>&1 | tee "$_OUTDIR$logfile"
}

_rmlogs() {
  [ "$(find output/ -type f -iname '*.log')" ] \
    && find output/ -type f -iname '*.log' -delete \
    || printf "Already empty: nothing to do\\n"
}

_clean() {
  [ "$(ls -A output)" ] \
    && rm -rf output \
    && mkdir output \
    || printf "Already empty: nothing to do\\n"
}

_tidy() {
  rm -rf .tmp
}

_print_help() {
  cat <<HEREDOC
Simplifies building presentations in html, powerpoint and pdf

Usage:
  ${_ME} [BUILD OPTIONS]

Build Options:
  ${bold}-h | --help${normal}   Show this screen.
  ${bold}-p | --pdf${normal}    build pdf
  ${bold}-x | --pptx${normal}   build powerpoint
  ${bold}-w | --html${normal}   build html (slidy)
  ${bold}-c | --clean${normal}  clear the output directory
  ${bold}-s | --silent${normal} remove any logs created
HEREDOC
}

###### OPTION PARSING ##########################################

OPTIONS=hpwxcs
LONGOPTS=help,pdf,pptx,html,clean,silent

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  # e.g. return value is 1
  #  then getopt has complained about wrong arguments to stdout
  exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

clearOutput=false
makeInputFile=false
noLogFiles=false
showHelp=false

formats_array=()

if [ "$1" == '--' ]; then
  ## no options passed = help message
  showHelp=true
else
  while true; do
    case "$1" in
      -p | --pdf)
        formats_array+=("pdf")
        makeInputFile=true
        shift
        ;;
      -x | --pptx)
        formats_array+=("pptx")
        makeInputFile=true
        shift
        ;;
      -w | --html)
        formats_array+=("html")
        makeInputFile=true
        shift
        ;;
      -c | --clean)
        clearOutput=true
        shift
        ;;
      -s | --silent)
        noLogFiles=true
        shift
        ;;
      -h | --help)
        showHelp=true
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        showHelp=true
        ;;
    esac
  done
fi

main() {
  trap _tidy EXIT
  if [ "$showHelp" = true ]; then
    # print help and nothing else...
    _print_help
  else
    if [ "$clearOutput" = true ]; then
      _clean
      exit
    fi
    if [ $makeInputFile = true ]; then
      _makeInputFile
      output=$(_outputFileName)
      for format in "${formats_array[@]}"; do
        _buildPresentation "$format"
      done
    fi
    if [ "$noLogFiles" = true ]; then
      _rmlogs
    fi
  fi
}

main
